// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using imdf.Database;

#nullable disable

namespace imdf.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221021083554_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("imdf.Database.Models.Actor", b =>
                {
                    b.Property<int>("Actor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Actor_Id"), 1L, 1);

                    b.Property<DateTime?>("Actor_Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Actor_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Actor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Actor_Id");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.ActorXMovie", b =>
                {
                    b.Property<int>("ActorXMovie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorXMovie_Id"), 1L, 1);

                    b.Property<int>("ActorXMovie_ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorXMovie_MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorXMovie_Id");

                    b.HasIndex("ActorXMovie_ActorId");

                    b.HasIndex("ActorXMovie_MovieId");

                    b.ToTable("ActorXMovie", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Comment", b =>
                {
                    b.Property<int>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Comment_Id"), 1L, 1);

                    b.Property<string>("Comment_Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Comment_MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Comment_UserId")
                        .HasColumnType("int");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Comment_MovieId");

                    b.HasIndex("Comment_UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Director", b =>
                {
                    b.Property<int>("Director_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Director_Id"), 1L, 1);

                    b.Property<DateTime?>("Director_Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Director_Id");

                    b.ToTable("Director", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Favourite", b =>
                {
                    b.Property<int>("Favourite_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Favourite_Id"), 1L, 1);

                    b.Property<int>("Favourite_MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Favourite_UserId")
                        .HasColumnType("int");

                    b.HasKey("Favourite_Id");

                    b.HasIndex("Favourite_MovieId");

                    b.HasIndex("Favourite_UserId");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Gender", b =>
                {
                    b.Property<int>("Gender_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gender_Id"), 1L, 1);

                    b.Property<string>("Gender_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gender_Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.GenderXMovie", b =>
                {
                    b.Property<int>("GenderXMovie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderXMovie_Id"), 1L, 1);

                    b.Property<int>("GenderXMovie_GenderId")
                        .HasColumnType("int");

                    b.Property<int>("GenderXMovie_MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenderXMovie_Id");

                    b.HasIndex("GenderXMovie_GenderId");

                    b.HasIndex("GenderXMovie_MovieId");

                    b.ToTable("GenderXMovie", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.IMDFUser", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"), 1L, 1);

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToTable("IMDFUser", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Movie", b =>
                {
                    b.Property<int>("Movie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Movie_Id"), 1L, 1);

                    b.Property<string>("Movie_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Movie_DirectorId")
                        .HasColumnType("int");

                    b.Property<float>("Movie_Duration")
                        .HasColumnType("real");

                    b.Property<string>("Movie_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Movie_ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Movie_Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Movie_Valoration")
                        .HasColumnType("real");

                    b.HasKey("Movie_Id");

                    b.HasIndex("Movie_DirectorId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.ActorXMovie", b =>
                {
                    b.HasOne("imdf.Database.Models.Actor", "Actor")
                        .WithMany("ActorsXMovies")
                        .HasForeignKey("ActorXMovie_ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany("Movie_ActorsIds")
                        .HasForeignKey("ActorXMovie_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.Comment", b =>
                {
                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("Comment_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("imdf.Database.Models.IMDFUser", "User")
                        .WithMany()
                        .HasForeignKey("Comment_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("imdf.Database.Models.Favourite", b =>
                {
                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Favourite_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("imdf.Database.Models.IMDFUser", "User")
                        .WithMany()
                        .HasForeignKey("Favourite_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("imdf.Database.Models.GenderXMovie", b =>
                {
                    b.HasOne("imdf.Database.Models.Gender", "Gender")
                        .WithMany("GendersXMovies")
                        .HasForeignKey("GenderXMovie_GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany("Movie_GendersIds")
                        .HasForeignKey("GenderXMovie_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.Movie", b =>
                {
                    b.HasOne("imdf.Database.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("Movie_DirectorId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("imdf.Database.Models.Actor", b =>
                {
                    b.Navigation("ActorsXMovies");
                });

            modelBuilder.Entity("imdf.Database.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("imdf.Database.Models.Gender", b =>
                {
                    b.Navigation("GendersXMovies");
                });

            modelBuilder.Entity("imdf.Database.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Movie_ActorsIds");

                    b.Navigation("Movie_GendersIds");
                });
#pragma warning restore 612, 618
        }
    }
}
