// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using imdf.Database;

#nullable disable

namespace imdf.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("imdf.Database.Models.Comment", b =>
                {
                    b.Property<int>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Comment_Id"), 1L, 1);

                    b.Property<string>("Comment_Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Comment_MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Comment_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Comment_MovieId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Favourite", b =>
                {
                    b.Property<int>("Favourite_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Favourite_Id"), 1L, 1);

                    b.Property<int>("Favourite_MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Favourite_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Favourite_Id");

                    b.HasIndex("Favourite_MovieId");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Gender", b =>
                {
                    b.Property<int>("Gender_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gender_Id"), 1L, 1);

                    b.Property<string>("Gender_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gender_Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.GenderXMovie", b =>
                {
                    b.Property<int>("GenderXMovie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderXMovie_Id"), 1L, 1);

                    b.Property<int>("GenderXMovie_GenderId")
                        .HasColumnType("int");

                    b.Property<int>("GenderXMovie_MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenderXMovie_Id");

                    b.HasIndex("GenderXMovie_GenderId");

                    b.HasIndex("GenderXMovie_MovieId");

                    b.ToTable("GenderXMovie", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Movie", b =>
                {
                    b.Property<int>("Movie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Movie_Id"), 1L, 1);

                    b.Property<string>("Movie_Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie_Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie_Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movie_Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Movie_Duration")
                        .HasColumnType("int");

                    b.Property<string>("Movie_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Movie_ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Movie_Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Movie_Valoration")
                        .HasColumnType("float");

                    b.HasKey("Movie_Id");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Vote", b =>
                {
                    b.Property<int>("Vote_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Vote_Id"), 1L, 1);

                    b.Property<int>("Vote_MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Vote_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Vote_Valoration")
                        .HasColumnType("float");

                    b.HasKey("Vote_Id");

                    b.HasIndex("Vote_MovieId");

                    b.ToTable("Vote", (string)null);
                });

            modelBuilder.Entity("imdf.Database.Models.Comment", b =>
                {
                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("Comment_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.Favourite", b =>
                {
                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Favourite_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.GenderXMovie", b =>
                {
                    b.HasOne("imdf.Database.Models.Gender", "Gender")
                        .WithMany("GendersXMovies")
                        .HasForeignKey("GenderXMovie_GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany("Movie_GendersIds")
                        .HasForeignKey("GenderXMovie_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.Vote", b =>
                {
                    b.HasOne("imdf.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("Vote_MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("imdf.Database.Models.Gender", b =>
                {
                    b.Navigation("GendersXMovies");
                });

            modelBuilder.Entity("imdf.Database.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Movie_GendersIds");
                });
#pragma warning restore 612, 618
        }
    }
}
